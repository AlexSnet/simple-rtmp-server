{"name":"Simple-rtmp-server","tagline":"simple rtmp origin live server over state-threads.","body":"simple-rtmp-server\r\n==================\r\n\r\nsrs(simple rtmp origin live server) over state-threads.<br/>\r\nsrs is a simple, high-performance, running in single process, origin live server.<br/>\r\nblog: [http://blog.csdn.net/win_lin](http://blog.csdn.net/win_lin) <br/>\r\nsee also: [https://github.com/winlinvip/simple-rtmp-server](https://github.com/winlinvip/simple-rtmp-server) <br/>\r\nsee also: [http://winlinvip.github.io/simple-rtmp-server](http://winlinvip.github.io/simple-rtmp-server)\r\n\r\n### Contributors\r\nwinlin(winterserver): [http://blog.csdn.net/win_lin](http://blog.csdn.net/win_lin)\r\n\r\n### Usage\r\nstep 1: build srs <br/>\r\n<pre>\r\ntar xf simple-rtmp-server-*.*.tar.gz\r\ncd simple-rtmp-server-*.*/trunk\r\n./configure --with-ssl --with-hls --with-ffmpeg\r\nmake\r\n</pre>\r\nstep 2: start srs <br/>\r\n<pre>\r\n./objs/simple_rtmp_server -c conf/srs.conf\r\n</pre>\r\nstep 3(optinal): start srs listen at 19350 to forward to<br/>\r\n<pre>\r\n./objs/simple_rtmp_server -c conf/srs.19350.conf\r\n</pre>\r\nstep 4(optional): start nginx for HLS <br/>\r\n<pre>\r\nsudo ./objs/nginx/sbin/nginx\r\n</pre>\r\nstep 5: publish live stream <br/>\r\n<pre>\r\nFMS URL: rtmp://127.0.0.1:1935/live\r\nStream:  livestream\r\nFor example, use ffmpeg to publish:\r\n    for((;;)); do \\\r\n        ./objs/ffmpeg/bin/ffmpeg -re -i ./doc/source.200kbps.768x320.flv \\\r\n        -vcodec copy -acodec copy \\\r\n        -f flv -y rtmp://127.0.0.1:1935/live/livestream; \\\r\n        sleep 1; \\\r\n    done\r\n</pre>\r\nstep 6: add server ip to client hosts as demo. <br/>\r\n<pre>\r\n# edit the folowing file:\r\n# linux: /etc/hosts\r\n# windows: C:\\Windows\\System32\\drivers\\etc\\hosts\r\n# where server ip is 192.168.2.111\r\n192.168.2.111 demo \r\n</pre>\r\nstep 7: play live stream. <br/>\r\n<pre>\r\nrtmp url: rtmp://demo:1935/live/livestream\r\nm3u8 url: http://demo:80/live/livestream.m3u8\r\n</pre>\r\nstep 8: play live stream auto transcoded<br/>\r\n<pre>\r\nrtmp url: rtmp://demo:1935/live/livestream_ld\r\nm3u8 url: http://demo:80/live/livestream_ld.m3u8\r\nrtmp url: rtmp://demo:1935/live/livestream_sd\r\nm3u8 url: http://demo:80/live/livestream_sd.m3u8\r\n</pre>\r\nstep 9: play live stream auto forwarded, the hls dir change to /forward<br/>\r\n<pre>\r\nrtmp url: rtmp://demo:19350/live/livestream\r\nm3u8 url: http://demo:80/forward/live/livestream.m3u8\r\nrtmp url: rtmp://demo:19350/live/livestream_ld\r\nm3u8 url: http://demo:80/forward/live/livestream_ld.m3u8\r\nrtmp url: rtmp://demo:19350/live/livestream_sd\r\nm3u8 url: http://demo:80/forward/live/livestream_sd.m3u8\r\n</pre>\r\n\r\n### Architecture\r\nSystem Architecture:\r\n<pre>\r\n+------------------------------------------------------+\r\n|             SRS(Simple Rtmp Server)                  |\r\n+---------------+---------------+-----------+----------+\r\n|   API/hook    |   Transcoder  |    HLS    |   RTMP   |\r\n|  http-parser  |  FFMPEG/x264  |  NGINX/ts | protocol |\r\n+---------------+---------------+-----------+----------+\r\n|              Network(state-threads)                  |\r\n+------------------------------------------------------+\r\n|      All Linux(RHEL,Centos,Ubuntu,Fedora...)         |\r\n+------------------------------------------------------+\r\n</pre>\r\nStream Architecture:\r\n<pre>\r\n        +---------+              +----------+ \r\n        + Publish +              +  Deliver | \r\n        +---|-----+              +----|-----+ \r\n+-----------+-------------------------+----------------+\r\n| Encoder   | SRS(Simple Rtmp Server) |     Client     |\r\n+-----------+-------------------------+----------------+\r\n| (FMLE,    |   +-> RTMP protocol ----+-> Flash Player |\r\n| FFMPEG, --+-> +-> HLS/NGINX --------+-> m3u8 player  |\r\n| Flash,    |   +-> Fowarder ---------+-> RTMP Server  |\r\n| XSPLIT,   |   +-> Transcoder -------+-> RTMP Server  |\r\n|  ...)     |   +-> DVR --------------+-> FILE         |\r\n+-----------+-------------------------+----------------+\r\n</pre>\r\n\r\n### System Requirements\r\nSupported operating systems and hardware:\r\n* All Linux , both 32 and 64 bits\r\n* All handware.\r\n\r\n### Summary\r\n1. simple: also stable enough.<br/>\r\n2. high-performance: single-thread, async socket, event/st-thread driven.<br/>\r\n3. no edge server, origin server only.<br/>\r\n4. no vod streaming, live streaming only.<br/>\r\n5. no multiple processes, single process only.<br/>\r\n6. support vhost, support \\_\\_defaultVhost\\_\\_.<br/>\r\n7. support adobe rtmp live streaming.<br/>\r\n8. support apple hls(m3u8) live streaming.<br/>\r\n9. support reload config to enable changes.<br/>\r\n10. support cache last gop for flash player to fast startup.<br/>\r\n11. support listen at multiple ports.<br/>\r\n12. support long time(>4.6hours) publish/play.<br/>\r\n13. high performace, 1800 connections(500kbps), 900Mbps, CPU 90.2%, 41MB<br/>\r\n14. support forward publish stream to build active-standby cluster.<br/>\r\n15. support broadcast by forward the stream to other servers(origin/edge).<br/>\r\n16. support live stream transcoding by ffmpeg.<br/>\r\n17. support live stream transcoding by ffmpeg.<br/>\r\n18. support ffmpeg filters(logo/overlay/crop), x264 params.<br/>\r\n19. [plan] support network based cli and json result.<br/>\r\n20. [plan] support http callback api hooks(for authentication).<br/>\r\n21. [plan] support bandwidth test api and flash client.<br/>\r\n22. [plan] support adobe flash refer/token/swf verification.<br/>\r\n23. [plan] support adobe amf3 codec.<br/>\r\n24. [plan] support dvr(record live to vod file)<br/>\r\n25. [plan] support FMS edge protocol<br/>\r\n26. [plan] support encryption: RTMPE/RTMPS, HLS DRM<br/>\r\n27. [plan] support RTMPT, http to tranverse firewalls<br/>\r\n\r\n### Performance\r\n1. 300 connections, 150Mbps, 500kbps, CPU 18.8%, 5956KB.\r\n2. 600 connections, 300Mbps, 500kbps, CPU 32.1%, 9808KB.\r\n3. 900 connections, 450Mbps, 500kbps, CPU 49.9%, 11MB.\r\n4. 1200 connections, 600Mbps, 500kbps, CPU 72.4%, 15MB.\r\n5. 1500 connections, 750Mbps, 500kbps, CPU 81.9%, 28MB.\r\n6. 1800 connections, 900Mbps, 500kbps, CPU 90.2%, 41MB.\r\n<pre>\r\n----total-cpu-usage---- -dsk/total- ---net/lo-- ---paging-- ---system--\r\nusr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw \r\n 58   9  32   0   0   1|   0  4168k| 277M  277M|   0     0 |  29k   25k\r\n 61   8  30   0   0   1|   0  1168k| 336M  336M|   0     0 |  29k   24k\r\n 63   8  27   0   0   1|   0  2240k| 124M  124M|   0     0 |  32k   33k\r\n 62   8  28   0   0   1|   0  1632k| 110M  110M|   0     0 |  31k   33k\r\n 67   9  23   0   0   2|   0  1604k| 130M  130M|   0     0 |  33k   32k\r\n 63   9  27   0   0   2|   0  1496k| 145M  145M|   0     0 |  32k   32k\r\n 61   9  29   0   0   1|   0  1112k| 132M  132M|   0     0 |  32k   33k\r\n 63   9  27   0   0   2|   0  1220k| 145M  145M|   0     0 |  32k   33k\r\n 53   7  40   0   0   1|   0  1360k| 115M  115M|   0     0 |  24k   26k\r\n 51   7  41   0   0   1|   0  1184k| 146M  146M|   0     0 |  24k   27k\r\n 39   6  54   0   0   1|   0  1284k| 105M  105M|   0     0 |  22k   28k\r\n 41   6  52   0   0   1|   0  1264k| 116M  116M|   0     0 |  25k   28k\r\n 48   6  45   0   0   1|   0  1272k| 143M  143M|   0     0 |  27k   27k\r\n</pre>\r\n\r\n### Releases\r\n* 2013-11-29, [release v0.6](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.6), support forward stream to origin/edge. 16094 lines.<br/>\r\n* 2013-11-26, [release v0.5](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.5), support HLS(m3u8), fragment and window. 14449 lines.<br/>\r\n* 2013-11-10, [release v0.4](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.4), support reload config, pause, longtime publish/play. 12500 lines.<br/>\r\n* 2013-11-04, [release v0.3](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.3), support vhost, refer, gop cache, listen multiple ports. 11773 lines.<br/>\r\n* 2013-10-25, [release v0.2](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.2), support rtmp flash publish, h264, time jitter correct. 10125 lines.<br/>\r\n* 2013-10-23, [release v0.1](https://github.com/winlinvip/simple-rtmp-server/releases/tag/0.1), support rtmp FMLE/FFMPEG publish, vp6. 8287 lines.<br/>\r\n* 2013-10-17, created.<br/>\r\n\r\n### Compare\r\n* srs v0.6: 16094 lines.<br/>\r\n* srs v0.5: 14449 lines.<br/>\r\n* srs v0.4: 12500 lines.<br/>\r\n* srs v0.3: 11773 lines.<br/>\r\n* srs v0.2: 10125 lines.<br/>\r\n* srs v0.1: 8287 lines.<br/>\r\n* nginx-rtmp v1.0.4: 26786 lines <br/>\r\n* nginx v1.5.0: 139524 lines <br/>\r\n\r\n### History\r\n* v0.7, 2013-12-01, support dead-loop detect for forwarder and transcoder.\r\n* v0.7, 2013-12-01, support all ffmpeg filters and params.\r\n* v0.7, 2013-11-30, support live stream transcoder by ffmpeg.\r\n* v0.7, 2013-11-30, support --with/without -ffmpeg, build ffmpeg-2.1.\r\n* v0.7, 2013-11-30, add ffmpeg-2.1, x264-core138, lame-3.99.5, libaacplus-2.0.2.\r\n* v0.6, 2013-11-29, v0.6 released. 16094 lines.\r\n* v0.6, 2013-11-29, add performance summary, 1800 clients, 900Mbps, CPU 90.2%, 41MB.\r\n* v0.6, 2013-11-29, support forward stream to other edge server.\r\n* v0.6, 2013-11-29, support forward stream to other origin server.\r\n* v0.6, 2013-11-28, fix memory leak bug, aac decode bug.\r\n* v0.6, 2013-11-27, support --with or --without -hls and -ssl options.\r\n* v0.6, 2013-11-27, support AAC 44100HZ sample rate for iphone, adjust the timestamp.\r\n* v0.5, 2013-11-26, v0.5 released. 14449 lines.\r\n* v0.5, 2013-11-24, support HLS(m3u8), fragment and window.\r\n* v0.5, 2013-11-24, support record to ts file for HLS.\r\n* v0.5, 2013-11-21, add ts_info tool to demux ts file.\r\n* v0.5, 2013-11-16, add rtmp players(OSMF/jwplayer5/jwplayer6).\r\n* v0.4, 2013-11-10, v0.4 released. 12500 lines.\r\n* v0.4, 2013-11-10, support config and reload the pithy print.\r\n* v0.4, 2013-11-09, support reload config(vhost and its detail).\r\n* v0.4, 2013-11-09, support reload config(listen and chunk_size) by SIGHUP(1).\r\n* v0.4, 2013-11-09, support longtime(>4.6hours) publish/play.\r\n* v0.4, 2013-11-09, support config the chunk_size.\r\n* v0.4, 2013-11-09, support pause for live stream.\r\n* v0.3, 2013-11-04, v0.3 released. 11773 lines.\r\n* v0.3, 2013-11-04, support refer/play-refer/publish-refer.\r\n* v0.3, 2013-11-04, support vhosts specified config.\r\n* v0.3, 2013-11-02, support listen multiple ports.\r\n* v0.3, 2013-11-02, support config file in nginx-conf style.\r\n* v0.3, 2013-10-29, support pithy print log message specified by stage.\r\n* v0.3, 2013-10-28, support librtmp without extended-timestamp in 0xCX chunk packet.\r\n* v0.3, 2013-10-27, support cache last gop for client fast startup.\r\n* v0.2, 2013-10-25, v0.2 released. 10125 lines.\r\n* v0.2, 2013-10-25, support flash publish.\r\n* v0.2, 2013-10-25, support h264/avc codec by rtmp complex handshake.\r\n* v0.2, 2013-10-24, support time jitter detect and correct algorithm\r\n* v0.2, 2013-10-24, support decode codec type to cache the h264/avc sequence header.\r\n* v0.1, 2013-10-23, v0.1 released. 8287 lines.\r\n* v0.1, 2013-10-23, support basic amf0 codec, simplify the api using c-style api.\r\n* v0.1, 2013-10-23, support shared ptr msg for zero memory copy.\r\n* v0.1, 2013-10-22, support vp6 codec with rtmp protocol specified simple handshake.\r\n* v0.1, 2013-10-20, support multiple flash client play live streaming.\r\n* v0.1, 2013-10-20, support FMLE/FFMPEG publish live streaming.\r\n* v0.1, 2013-10-18, support rtmp message2chunk protocol(send\\_message).\r\n* v0.1, 2013-10-17, support rtmp chunk2message protocol(recv\\_message).\r\n\r\nbeijing, 2013\r\nWinlin\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}